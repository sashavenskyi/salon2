# -*- coding: utf-8 -*-
"""
Created on Tue Aug 26 13:10:38 2025

@author: olve
"""

import streamlit as st
import pandas as pd
from telethon import TelegramClient, events
import re
from datetime import datetime
import asyncio
import matplotlib.pyplot as plt
import seaborn as sns
from io import BytesIO
import os

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram API ---
# –ó–∞–º—ñ–Ω—ñ—Ç—å —Ü—ñ –¥–∞–Ω—ñ –Ω–∞ –≤–∞—à—ñ!
API_ID = 28827902
API_HASH = '570a58b3196f392d2c754ff123c9929f'
CHANNEL_ID = -4914800011

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö ---
def parse_daily_report(report_text):
    """
    –ü–∞—Ä—Å–∏—Ç—å —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –∑–∞ –Ω–∞–¥–∞–Ω–∏–º —à–∞–±–ª–æ–Ω–æ–º —ñ –ø–æ–≤–µ—Ä—Ç–∞—î DataFrame.
    """
    date_match = re.search(r'–ó–≤—ñ—Ç –∑–∞ (.+)', report_text)
    report_date = datetime.strptime(date_match.group(1).strip(), '%d.%m.%Y').date() if date_match else None
    
    lines = report_text.strip().split('\n')
    data = []
    
    section = None
    for line in lines:
        line = line.strip()
        if not line:
            continue
        if "–ö–ª—ñ—î–Ω—Ç–∏ —Ç–∞ –ø–æ—Å–ª—É–≥–∏:" in line:
            section = "services"
        elif "–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–æ–¥–∞–∂—ñ:" in line:
            section = "additional_sales"
        elif "–í–∏—Ç—Ä–∞—Ç–∏:" in line:
            section = "expenses"
        
        if section == "services" and re.match(r'^\d+\.', line):
            current_entry = {'Date': report_date, 'Section': 'Service'}
            lines_slice = lines[lines.index(line):]
            for sub_line in lines_slice:
                if "–Ü–º'—è:" in sub_line:
                    current_entry['Client'] = sub_line.split(":", 1)[1].strip()
                elif "–ú–∞–π—Å—Ç–µ—Ä:" in sub_line:
                    current_entry['Master'] = sub_line.split(":", 1)[1].strip()
                elif "–ü–æ—Å–ª—É–≥–∞:" in sub_line:
                    current_entry['Service'] = sub_line.split(":", 1)[1].strip()
                elif "–û–ø–ª–∞—Ç–∞:" in sub_line:
                    current_entry['Revenue'] = int(re.search(r'(\d+)', sub_line).group(1))
                elif "–¢–∏–ø –æ–ø–ª–∞—Ç–∏:" in sub_line:
                    current_entry['PaymentMethod'] = sub_line.split(":", 1)[1].strip()
                    break
            data.append(current_entry)
        
        elif section == "additional_sales" and line.startswith("- –ü—Ä–æ–¥–∞–∂:"):
            current_entry = {'Date': report_date, 'Section': 'Additional Sale'}
            current_entry['Service'] = line.split(":", 1)[1].strip()
            lines_slice = lines[lines.index(line)+1:]
            for sub_line in lines_slice:
                if "–û–ø–ª–∞—Ç–∞:" in sub_line:
                    current_entry['Revenue'] = int(re.search(r'(\d+)', sub_line).group(1))
                elif "–¢–∏–ø –æ–ø–ª–∞—Ç–∏:" in sub_line:
                    current_entry['PaymentMethod'] = sub_line.split(":", 1)[1].strip()
                    data.append(current_entry)
                    break
    
    df = pd.DataFrame(data)
    df['Admin'] = '–ù–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π' 
    return df

def generate_monthly_report(all_reports_df):
    """
    –ì–µ–Ω–µ—Ä—É—î –º—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–±'—î–¥–Ω–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
    """
    if all_reports_df.empty:
        st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É.")
        return None
    
    all_reports_df['Date'] = pd.to_datetime(all_reports_df['Date'])
    monthly_revenue_df = all_reports_df[all_reports_df['PaymentMethod'] != '–ö—É—Ä—Å']
    total_monthly_revenue = monthly_revenue_df['Revenue'].sum()
    revenue_by_master = monthly_revenue_df.groupby('Master')['Revenue'].sum().sort_values(ascending=False)
    revenue_by_service = monthly_revenue_df.groupby('Service')['Revenue'].sum().sort_values(ascending=False).head(5)
    revenue_by_admin = monthly_revenue_df.groupby('Admin')['Revenue'].sum().sort_values(ascending=False)
    revenue_by_payment_method = monthly_revenue_df.groupby('PaymentMethod')['Revenue'].sum()

    def create_chart(data, title, type='bar'):
        plt.figure(figsize=(10, 6))
        if type == 'bar':
            sns.barplot(x=data.index, y=data.values, palette='viridis')
        else:
            plt.pie(data.values, labels=data.index, autopct='%1.1f%%', startangle=90, colors=sns.color_palette('pastel'))
        plt.title(title)
        plt.xlabel('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è')
        plt.ylabel('–í–∏—Ä—É—á–∫–∞ (–≥—Ä–Ω)')
        plt.xticks(rotation=45)
        plt.tight_layout()
        img_buffer = BytesIO()
        plt.savefig(img_buffer, format='png')
        img_buffer.seek(0)
        plt.close()
        return img_buffer

    return {
        "–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∏—Ä—É—á–∫–∞": total_monthly_revenue,
        "–í–∏—Ä—É—á–∫–∞ –ø–æ –º–∞–π—Å—Ç—Ä–∞—Ö": revenue_by_master,
        "–í–∏—Ä—É—á–∫–∞ –ø–æ –ø–æ—Å–ª—É–≥–∞—Ö": revenue_by_service,
        "–í–∏—Ä—É—á–∫–∞ –ø–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö": revenue_by_admin,
        "–ì—Ä–∞—Ñ—ñ–∫ –ø–æ –º–∞–π—Å—Ç—Ä–∞—Ö": create_chart(revenue_by_master, '–í–∏—Ä—É—á–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å –ø–æ –º–∞–π—Å—Ç—Ä–∞—Ö'),
        "–ì—Ä–∞—Ñ—ñ–∫ –ø–æ –ø–æ—Å–ª—É–≥–∞—Ö": create_chart(revenue_by_service, '–¢–æ–ø-5 –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏—Ö –ø–æ—Å–ª—É–≥'),
        "–ì—Ä–∞—Ñ—ñ–∫ –æ–ø–ª–∞—Ç–∏": create_chart(revenue_by_payment_method, '–†–æ–∑–ø–æ–¥—ñ–ª –æ–ø–ª–∞—Ç–∏', type='pie')
    }

# --- –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–≥—Ä–∞–º–∏ Streamlit ---
st.set_page_config(page_title="–ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö –ø–æ —Å–∞–ª–æ–Ω—É Venska Easy Body –õ—É—Ü—å–∫", layout="wide")
st.title("üìä –ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö –ø–æ —Å–∞–ª–æ–Ω—É Venska Easy Body –õ—É—Ü—å–∫")

st.info("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Telegram', —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–±—ñ—Ä –∑–≤—ñ—Ç—ñ–≤. –î–∞–Ω—ñ –±—É–¥—É—Ç—å –∑–±–µ—Ä—ñ–≥–∞—Ç–∏—Å—è —É —Ñ–∞–π–ª—ñ 'all_reports.csv'.")

if 'telegram_client' not in st.session_state:
    st.session_state.telegram_client = None

async def start_telegram_session():
    if not st.session_state.telegram_client:
        try:
            client = TelegramClient('session_name', API_ID, API_HASH)
            await client.start()
            st.session_state.telegram_client = client
            st.success("–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Telegram! –ß–µ–∫–∞—é –Ω–∞ –Ω–æ–≤—ñ –∑–≤—ñ—Ç–∏.")
            
            @client.on(events.NewMessage(chats=CHANNEL_ID))
            async def new_message_handler(event):
                if "–ó–≤—ñ—Ç –∑–∞" in event.message.text:
                    try:
                        daily_df = parse_daily_report(event.message.text)
                        with open('all_reports.csv', 'a', encoding='utf-8') as f:
                            daily_df.to_csv(f, header=f.tell()==0, index=False)
                    except Exception as e:
                        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–≤—ñ—Ç—É: {e}")
            await client.run_until_disconnected()
        except Exception as e:
            st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Telegram: {e}")


if st.button("–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Telegram"):
    asyncio.run(start_telegram_session())

if st.button("–°—Ç–≤–æ—Ä–∏—Ç–∏ –º—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç"):
    if 'all_reports.csv' not in os.listdir():
        st.error("–§–∞–π–ª 'all_reports.csv' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    else:
        try:
            all_reports_df = pd.read_csv('all_reports.csv')
            report = generate_monthly_report(all_reports_df)
            if report:
                st.header("–ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π –º—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç")
                st.markdown("---")
                col1, col2 = st.columns(2)
                with col1:
                    st.subheader("üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∏—Ä—É—á–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å")
                    st.metric(label="–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞", value=f"{report['–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∏—Ä—É—á–∫–∞']:,} –≥—Ä–Ω".replace(",", " "))
                with col2:
                    st.subheader("–†–æ–∑–ø–æ–¥—ñ–ª –æ–ø–ª–∞—Ç–∏")
                    st.image(report['–ì—Ä–∞—Ñ—ñ–∫ –æ–ø–ª–∞—Ç–∏'], caption='–†–æ–∑–ø–æ–¥—ñ–ª –æ–ø–ª–∞—Ç–∏ (–≥–æ—Ç—ñ–≤–∫–∞/–∫–∞—Ä—Ç–∞)')
                st.markdown("---")
                st.subheader("–í–∏—Ä—É—á–∫–∞ –∑–∞ –º–∞–π—Å—Ç—Ä–∞–º–∏")
                st.dataframe(report['–í–∏—Ä—É—á–∫–∞ –ø–æ –º–∞–π—Å—Ç—Ä–∞—Ö'])
                st.image(report['–ì—Ä–∞—Ñ—ñ–∫ –ø–æ –º–∞–π—Å—Ç—Ä–∞—Ö'], caption='–†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ä—É—á–∫–∏ –ø–æ –º–∞–π—Å—Ç—Ä–∞—Ö')
                st.markdown("---")
                st.subheader("–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ –ø–æ—Å–ª—É–≥–∏")
                st.dataframe(report['–í–∏—Ä—É—á–∫–∞ –ø–æ –ø–æ—Å–ª—É–≥–∞—Ö'])
                st.image(report['–ì—Ä–∞—Ñ—ñ–∫ –ø–æ –ø–æ—Å–ª—É–≥–∞—Ö'], caption='–¢–æ–ø-5 –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏—Ö –ø–æ—Å–ª—É–≥')
        except Exception as e:
            st.error(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö: {e}")